<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Mon Aug 19 16:39:59 2019
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__vsf_thread_evthandler &rArr; __vsf_thread_entry &rArr; vsf_eda_return &rArr; vsf_evtq_on_eda_fini &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">Default_Handler</a> from lto-llvm-cf4d83.o(.text) referenced 31 times from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[2]">PendSV_Handler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[4]">SWI0_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[5]">SWI1_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[6]">SWI2_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[7]">SWI3_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[8]">SWI4_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[9]">SWI5_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[a]">SWI6_IRQHandler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[3]">SysTick_Handler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(RESET)
 <LI><a href="#[18]">__default_code_region_atom_code_on_enter</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.rodata)
 <LI><a href="#[19]">__default_code_region_atom_code_on_leave</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.rodata)
 <LI><a href="#[16]">__vsf_code_region_sched_on_enter</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.rodata)
 <LI><a href="#[17]">__vsf_code_region_sched_on_leave</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.rodata)
 <LI><a href="#[1a]">__vsf_main_entry</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.init_array.255)
 <LI><a href="#[13]">__vsf_os_evtq_swi_handler</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[15]">__vsf_thread_evthandler</a> from lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread) referenced from lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread)
 <LI><a href="#[12]">__vsf_timer_evthandler</a> from lto-llvm-cf4d83.o(.text.vsf.kernel.teda) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[b]">main</a> from lto-llvm-cf4d83.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[11]">vsf_eda_sync_force_reset</a> from lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[10]">vsf_eda_sync_increase</a> from lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[14]">vsf_thread_app_main_thread_t_entry</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[d]">vsf_thread_start</a> from lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[c]">vsf_thread_user_thread_a_t_entry</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[e]">vsf_thread_user_thread_b_t_entry</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.text)
 <LI><a href="#[f]">vsf_thread_user_thread_c_t_entry</a> from lto-llvm-cf4d83.o(.text) referenced from lto-llvm-cf4d83.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[65]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[42]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[44]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[67]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[68]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[69]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5f]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_wait
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_evthandler
</UL>

<P><STRONG><a name="[61]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_ret
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_evthandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_entry
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_app_main_thread_t_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SysTick_Handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; vsf_timer_wakeup &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_wakeup
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systick_disable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__post_vsf_kernel_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __post_vsf_kernel_init &rArr; vsf_thread_start &rArr; vsf_teda_init_ex &rArr; vsf_eda_init &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[40]"></a>vsf_kernel_get_resource_on_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[4]"></a>SWI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SWI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SWI2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SWI3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SWI4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SWI5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SWI6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_get
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_kernel_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[53]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[41]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[6e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[6f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[71]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Reset_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>__default_code_region_atom_code_on_enter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.rodata)
</UL>
<P><STRONG><a name="[19]"></a>__default_code_region_atom_code_on_leave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.rodata)
</UL>
<P><STRONG><a name="[16]"></a>__vsf_code_region_sched_on_enter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __vsf_code_region_sched_on_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.rodata)
</UL>
<P><STRONG><a name="[17]"></a>__vsf_code_region_sched_on_leave</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.rodata)
</UL>
<P><STRONG><a name="[4e]"></a>__vsf_dispatch_evt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.eda))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __vsf_dispatch_evt &rArr; vsf_eda_yield &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_yield
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
</UL>

<P><STRONG><a name="[1c]"></a>__vsf_dlist_remove_head_imp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
</UL>

<P><STRONG><a name="[1d]"></a>__vsf_dlist_remove_imp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_alloc
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_on_eda_fini
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_update_priotiry
</UL>

<P><STRONG><a name="[58]"></a>__vsf_eda_get_valid_eda</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_eda_get_valid_eda))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
</UL>

<P><STRONG><a name="[1e]"></a>__vsf_eda_set_priority</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __vsf_eda_set_priority &rArr; __vsf_eda_update_priotiry
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_set_priority
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_update_priotiry
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
</UL>

<P><STRONG><a name="[5c]"></a>__vsf_eda_set_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vsf_eda_set_timeout &rArr; vsf_timer_update &rArr; vsf_systimer_set &rArr; __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_timer_enqueue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_get_valid_eda
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
</UL>

<P><STRONG><a name="[1f]"></a>__vsf_eda_update_priotiry</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __vsf_eda_update_priotiry
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_priority
</UL>

<P><STRONG><a name="[1a]"></a>__vsf_main_entry</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __vsf_main_entry &rArr; __post_vsf_kernel_init &rArr; vsf_thread_start &rArr; vsf_teda_init_ex &rArr; vsf_eda_init &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__post_vsf_kernel_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_add_buffer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_kernel_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_set_target
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.init_array.255)
</UL>
<P><STRONG><a name="[20]"></a>__vsf_os_evtq_activate</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
</UL>

<P><STRONG><a name="[21]"></a>__vsf_os_evtq_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_on_eda_fini
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_update_priotiry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_priority
</UL>

<P><STRONG><a name="[22]"></a>__vsf_os_evtq_get_prio</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_init
</UL>

<P><STRONG><a name="[23]"></a>__vsf_os_evtq_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __vsf_os_evtq_init &rArr; __vsf_os_evtq_set_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_init
</UL>

<P><STRONG><a name="[24]"></a>__vsf_os_evtq_set_priority</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __vsf_os_evtq_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_priority
</UL>

<P><STRONG><a name="[13]"></a>__vsf_os_evtq_swi_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __vsf_os_evtq_swi_handler &rArr; vsf_evtq_poll &rArr; __vsf_dispatch_evt &rArr; vsf_eda_yield &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>__vsf_os_free_evt_node</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_on_eda_fini
</UL>

<P><STRONG><a name="[26]"></a>__vsf_pool_add_item</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __vsf_pool_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_free
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_add_buffer
</UL>

<P><STRONG><a name="[46]"></a>__vsf_sem_pend</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.__vsf_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_sem_pend
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_c_t_entry
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_b_t_entry
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_a_t_entry
</UL>

<P><STRONG><a name="[27]"></a>__vsf_systimer_set_target</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __vsf_systimer_set_target
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systick_enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systick_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[28]"></a>__vsf_systimer_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_set
</UL>

<P><STRONG><a name="[60]"></a>__vsf_thread_entry</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __vsf_thread_entry &rArr; vsf_eda_return &rArr; vsf_evtq_on_eda_fini &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_get_cur
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_evthandler
</UL>

<P><STRONG><a name="[15]"></a>__vsf_thread_evthandler</STRONG> (Thumb, 60 bytes, Stack size 176 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = __vsf_thread_evthandler &rArr; __vsf_thread_entry &rArr; vsf_eda_return &rArr; vsf_evtq_on_eda_fini &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread)
</UL>
<P><STRONG><a name="[12]"></a>__vsf_timer_evthandler</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.teda))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __vsf_timer_evthandler &rArr; vsf_timer_update &rArr; vsf_systimer_set &rArr; __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_timer_enqueue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_head_imp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>__vsf_yield</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __vsf_yield &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_wait
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_yield
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_c_t_entry
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_b_t_entry
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_a_t_entry
</UL>

<P><STRONG><a name="[29]"></a>print_str</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_c_t_entry
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_b_t_entry
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_a_t_entry
</UL>

<P><STRONG><a name="[2a]"></a>vsf_eda_free_frame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vsf_eda_free_frame &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
</UL>

<P><STRONG><a name="[54]"></a>vsf_eda_get_cur</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.eda))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_kernel_err_report
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_wait
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_ret
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_get_cur
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_yield
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_get_valid_eda
</UL>

<P><STRONG><a name="[4d]"></a>vsf_eda_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.eda))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vsf_eda_init &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_init_ex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[49]"></a>vsf_eda_post_evt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.eda))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_wakeup
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_yield
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
</UL>

<P><STRONG><a name="[55]"></a>vsf_eda_return</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_eda_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vsf_eda_return &rArr; vsf_evtq_on_eda_fini &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_on_eda_fini
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_free_frame
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_get_valid_eda
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dispatch_evt
</UL>

<P><STRONG><a name="[5b]"></a>vsf_eda_sync_decrease</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vsf_eda_sync_decrease &rArr; __vsf_eda_set_timeout &rArr; vsf_timer_update &rArr; vsf_systimer_set &rArr; __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_priority
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_get_valid_eda
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_sem_pend
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>

<P><STRONG><a name="[11]"></a>vsf_eda_sync_force_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vsf_eda_sync_force_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>vsf_eda_sync_get_reason</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_eda_sync_get_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vsf_eda_sync_get_reason &rArr; vsf_teda_cancel_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_sem_pend
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>

<P><STRONG><a name="[10]"></a>vsf_eda_sync_increase</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vsf_eda_sync_increase &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_priority
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_head_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_c_t_entry
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_b_t_entry
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_user_thread_a_t_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>vsf_eda_yield</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_eda_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vsf_eda_yield &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dispatch_evt
</UL>

<P><STRONG><a name="[2b]"></a>vsf_evtq_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vsf_evtq_init &rArr; __vsf_os_evtq_init &rArr; __vsf_os_evtq_set_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[2c]"></a>vsf_evtq_on_eda_fini</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vsf_evtq_on_eda_fini &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_free_evt_node
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_poll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
</UL>

<P><STRONG><a name="[2d]"></a>vsf_evtq_poll</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vsf_evtq_poll &rArr; __vsf_dispatch_evt &rArr; vsf_eda_yield &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_on_eda_fini
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_free_evt_node
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_set_priority
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get_prio
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_update_priotiry
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dispatch_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_swi_handler
</UL>

<P><STRONG><a name="[2e]"></a>vsf_evtq_post_evt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
</UL>

<P><STRONG><a name="[2f]"></a>vsf_evtq_post_evt_ex</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_alloc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_free_evt_node
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_get
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_evtq_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
</UL>

<P><STRONG><a name="[30]"></a>vsf_kernel_err_report</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>

<P><STRONG><a name="[4c]"></a>vsf_kernel_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.eda))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vsf_kernel_init &rArr; vsf_pool_add_buffer &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_add_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[31]"></a>vsf_pool_add_buffer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vsf_pool_add_buffer &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_pool_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_kernel_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[32]"></a>vsf_pool_alloc</STRONG> (Thumb, 664 bytes, Stack size 36 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vsf_pool_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_init_ex
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_evtq_post_evt_ex
</UL>

<P><STRONG><a name="[33]"></a>vsf_pool_free</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_pool_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_free_frame
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_os_free_evt_node
</UL>

<P><STRONG><a name="[34]"></a>vsf_pool_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vsf_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_kernel_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_main_entry
</UL>

<P><STRONG><a name="[35]"></a>vsf_sched_lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_init_ex
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_force_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_code_region_sched_on_enter
</UL>

<P><STRONG><a name="[36]"></a>vsf_set_base_priority</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_init_ex
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_cancel_timer
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_force_reset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_code_region_sched_on_leave
</UL>

<P><STRONG><a name="[37]"></a>vsf_stdin_getchar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[38]"></a>vsf_stdout_putchar</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[39]"></a>vsf_systick_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_get
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_set_target
</UL>

<P><STRONG><a name="[3a]"></a>vsf_systick_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_get
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_set_target
</UL>

<P><STRONG><a name="[3b]"></a>vsf_systimer_get</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systick_enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systick_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_update
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
</UL>

<P><STRONG><a name="[3c]"></a>vsf_systimer_set</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vsf_systimer_set &rArr; __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_update
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_set_target
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
</UL>

<P><STRONG><a name="[59]"></a>vsf_teda_cancel_timer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_teda_cancel_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vsf_teda_cancel_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_get_valid_eda
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_dlist_remove_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_return
</UL>

<P><STRONG><a name="[5d]"></a>vsf_teda_init_ex</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.vsf_teda_init_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vsf_teda_init_ex &rArr; vsf_eda_init &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_set_base_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_sched_lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_pool_alloc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_start
</UL>

<P><STRONG><a name="[57]"></a>vsf_teda_timer_enqueue</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, lto-llvm-cf4d83.o(.text.vsf.kernel.teda))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vsf_teda_timer_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
</UL>

<P><STRONG><a name="[14]"></a>vsf_thread_app_main_thread_t_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vsf_thread_app_main_thread_t_entry &rArr; main &rArr; __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>vsf_thread_get_cur</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread_get_cur))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_thread_entry
</UL>

<P><STRONG><a name="[64]"></a>vsf_thread_ret</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vsf_thread_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_wait
</UL>

<P><STRONG><a name="[5e]"></a>vsf_thread_sem_pend</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_wait
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_get_reason
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_decrease
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>

<P><STRONG><a name="[d]"></a>vsf_thread_start</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vsf_thread_start &rArr; vsf_teda_init_ex &rArr; vsf_eda_init &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_teda_init_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__post_vsf_kernel_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>vsf_thread_user_thread_a_t_entry</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vsf_thread_user_thread_a_t_entry &rArr; __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>vsf_thread_user_thread_b_t_entry</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vsf_thread_user_thread_b_t_entry &rArr; __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>vsf_thread_user_thread_c_t_entry</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vsf_thread_user_thread_c_t_entry &rArr; __vsf_sem_pend &rArr; vsf_thread_sem_pend &rArr; vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_sync_increase
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_str
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_sem_pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-cf4d83.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>vsf_thread_wait</STRONG> (Thumb, 42 bytes, Stack size 168 bytes, lto-llvm-cf4d83.o(text.vsf.kernel.vsf_thread_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vsf_thread_wait &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_ret
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_get_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_thread_sem_pend
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_yield
</UL>

<P><STRONG><a name="[3d]"></a>vsf_timer_update</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vsf_timer_update &rArr; vsf_systimer_set &rArr; __vsf_systimer_update &rArr; vsf_systimer_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_wakeup
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_systimer_set
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_update
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_systimer_set_target
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_timer_evthandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vsf_eda_set_timeout
</UL>

<P><STRONG><a name="[3e]"></a>vsf_timer_wakeup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-cf4d83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vsf_timer_wakeup &rArr; vsf_eda_post_evt &rArr; vsf_evtq_post_evt &rArr; vsf_evtq_post_evt_ex &rArr; __vsf_os_free_evt_node &rArr; vsf_pool_free &rArr; __vsf_pool_add_item
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_eda_post_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsf_timer_update
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
